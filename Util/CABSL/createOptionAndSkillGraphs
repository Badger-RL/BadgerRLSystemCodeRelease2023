#!/bin/bash
#
# This script generates a number of svg files from the skills and options.
# Its main parameter is the root directory of the behavior. From there,
# all files are searched for skills and options.
# The script requires GraphViz's program 'dot' to be installed.
#
# Author: Thomas RÃ¶fer

usage()
{
  echo >&2 "usage: $0 { options } <directory>"
  echo >&2 "  options:"
  echo >&2 "    -a <file>  manually add data"
  echo >&2 "    -d <dot>   path to executable 'dot'"
  echo >&2 "    -h         show this help"
  echo >&2 "    -p         output pdf instead of svg"
  exit 1
}

set -eu

format=svg
urlPath=file:
data=

# Process arguments
dot=dot
while [ $# -gt 0 ]; do
  case $1 in
    "-a")
      shift
      data=`cat $1`
      ;;
    "-d")
      shift
      if [ $# -gt 0 ]; then
        dot=$1
      else
        echo >&2 "error: parameter of '-d' missing"
        usage
      fi
      ;;
    "-h")
      usage
      ;;
    "-p")
      format=pdf
      urlPath=file://.`pwd`/
      ;;
    -*)
      echo >&2 "error: unknown option '$1'"
      usage
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Check arguments
dotAvailable=`which "$dot" || true`
if [ "$#" == 0 ]; then
  usage
  exit 1
elif [ ! -d "$1" ]; then
  echo >&2 "error: input directory '$1' does not exist"
  exit 1
elif [ -z "$dotAvailable" ]; then
  echo >&2 "error: cannot find '$dot'"
  exit 1
fi

# Collect the relevant information from the options
files=`grep -RE "^[ 	]*(option|IMPLEMENTS)[ 	]*\(" "$1" \
| sed \
  -e 's%:[ 	]*option[ 	]*(.*%%' \
  -e 's%:[ 	]*IMPLEMENTS[ 	]*(.*%%' \
| uniq`

options=`grep -hE "^[ 	]*option[ 	]*\(" $files \
| sed \
  -e "s%^[ 	]*option[ 	]*([ 	]*\([A-Za-z_][A-Za-z0-9_]*\).*$%\1%" \
| tr '\n' '|' \
| sed "s%|$%%"`

skills=`grep -hE "^[ 	]*IMPLEMENTS[ 	]*\(" $files \
| sed \
  -e "s%^[ 	]*IMPLEMENTS[ 	]*([ 	]*\([A-Za-z_][A-Za-z0-9_]*\).*$%the\1Skill%" \
| tr '\n' '|' \
| sed "s%|$%%"`

if [ -z "$options" ]; then
  all="$skills"
elif [ -z "$skills" ]; then 
  all="$options"
else
  all="$options|$skills"
fi

lines=`cat <<<"$data"; cat $files \
| sed "s%//.*%%" \
| tr '\t' ' ' \
| tr -d '\r' \
| tr '\n' '\t' \
| sed -e "s%/\*\([^*]*\*[^/]\)*[^*]*\*\**/%%g" \
  -e "s%[ 	]*	%	%g" \
| tr '\t' '\n' \
| grep -E "^[ 	]*(option|IMPLEMENTS)[ 	]*\([ 	]*[A-Za-z_][A-Za-z0-9_]*|(^|^.*[^A-Za-z0-9_])((($all|state|initial_state|target_state|aborted_state)[ 	]*\()|goto[ 	][ 	]*[A-Za-z_][A-Za-z0-9_]*)" \
| sed -E \
  -e "s%^[ 	]*option[ 	]*\([ 	]*([A-Za-z_][A-Za-z0-9_]*).*%option \1%" \
  -e "s%^[ 	]*IMPLEMENTS[ 	]*\([ 	]*([A-Za-z_][A-Za-z0-9_]*).*%option the\1Skill%" \
  -e "s%(^|^.*[^A-Za-z0-9_])($options)[   ]*\(.*%call \2%" \
  -e "s%(^|^.*[^A-Za-z0-9_])($skills)[   ]*\(.*%call \2%" \
  -e "s%(^|^.*[^A-Za-z0-9_])(state|initial_state|target_state|aborted_state)[   ]*\(([A-Za-z_][A-Za-z0-9_]*).*%\2 \3%" \
  -e "s%(^|^.*[^A-Za-z0-9_])goto[   ][   ]*([A-Za-z_][A-Za-z0-9_]*).*%goto \2%"`

# Collect skills that do not contain options.
# For these, no graph is generated. Therefore, they cannot be linked.
# Start with options that were manually provided, because they are fake ones.
falseoptions=`grep -h "^option[ 	]" <<<"$data" \
| sed \
  -e "s%^option[ 	]*\([A-Za-z_][A-Za-z0-9_]*\).*$%\1%" \
| tr '\n' '|' \
| sed "s%|$%%"`

# Generate temporary files containing all nodes and edges
optionsTmp=/tmp/options.tmp
rm -f "$optionsTmp"
option=
while read line; do
  type=`sed "s% .*%%" <<<"$line"`
  id=`sed "s%[^ ]* %%" <<<"$line"`
  label=`sed -E -e "s%the(.*)Skill%\1%" -e "s%_%\\\\\n%g" -e "s%([a-z])([A-Z])%\1\\\\\n\2%g" <<<"$id" | tr '[:upper:]' '[:lower:]'`
  tooltip=`sed -E -e "s%^the(.*)Skill$%skill '\1'%" -e "s%^([A-Z].*)$%option '\1'%" <<<"$id"`
  if [ "$type" == "option" ]; then
    if [ "the${id}Skill" != "$option" ]; then
      option=$id
      echo "Reading option '$option'" >&2
      if [ "$option" != "$(sed <<<"$option" 's%the\(.*\)Skill%\1%')" ]; then
        echo "  $option [shape = Mrecord, label = \"$label\", tooltip = \"$tooltip'\", URL = \"$urlPath$option.$format\"];" >>"$optionsTmp"
        falseoptions="$falseoptions|$option"
      else
        echo "  $option [shape = rectangle, label=\"$label\", tooltip = \"$tooltip\", URL = \"$urlPath$option.$format\"];" >>"$optionsTmp"
      fi
      common=
      state=
      internalTmp=/tmp/internal_$option.tmp
      externalTmp=/tmp/external_$option.tmp
      rm -f "$internalTmp"
      rm -f "$externalTmp"
    else
      falseoptions=`sed <<<"$falseoptions" "s%\(.*\)\|.*%\1%"`
    fi
  elif [ "$type" == "call" ]; then
    echo "$option -> $id;" >>"$optionsTmp"
    if [ "$state" == "" ]; then
      echo "option_ -> option_$id [ltail = cluster_, sametail = dummy, dir = both, arrowtail = dot, color = \"#808080\" style = dashed minlen = 2];" >>"$externalTmp"
      echo "option_ [style = invis];" >>"$internalTmp"
    else
      echo "$state -> option_$id [color = \"#808080\" style = dashed minlen = 2];" >>"$externalTmp"
    fi
    if [ "$id" != "$(sed <<<"$id" 's%the\(.*\)Skill%\1%')" ]; then
      echo "option_$id [shape = Mrecord, label = \"$label\", tooltip = \"$tooltip\", URL = \"$urlPath$id.$format\"];" >>"$externalTmp"
    else
      echo "option_$id [shape = rectangle, label = \"$label\", tooltip = \"$tooltip\", URL = \"$urlPath$id.$format\"];" >>"$externalTmp"
    fi

  elif [ "$type" == "state" ]; then
    state=$id
    echo " $state [shape = circle, label = \"$label\", tooltip = \"state '$tooltip'\"];" >>"$internalTmp"
  elif [ "$type" == "initial_state" ]; then
    state=$id
    echo "  $state [shape = Mcircle, label = \"$label\", tooltip = \"initial_state '$tooltip'\"];" >>"$internalTmp"
  elif [ "$type" == "target_state" ]; then
    state=$id
    echo "$state [shape = doublecircle, label = \"$label\", tooltip = \"target_state '$tooltip'\"];" >>"$internalTmp"
  elif [ "$type" == "aborted_state" ]; then
    state=$id
    echo "$state [shape = doubleoctagon, regular = true, label = \"$label\", tooltip = \"aborted_state '$tooltip'\"];" >>"$internalTmp"
  elif [ "$type" == "goto" ]; then
    if [ -z "$state" ]; then
      common=`echo "$common $id"`
    elif [ "$state" != "$id" ]; then
      echo "$state -> $id;" >>"$internalTmp"
    fi
  fi
  if [ "$type" == "state" -o "$type" == "initial_state" -o "$type" == "target_state" -o "$type" == "aborted_state" ]; then
    for target in $common; do
      if [ "$state" != "$target" ]; then
        echo "$state -> $target;" >>"$internalTmp"
      fi
    done
  fi
done <<<"$lines"

# Remove leading '|'
falseoptions=`sed <<<"$falseoptions" "s%^\|%%"`

# Write the main option graph
file=`basename "$1"`.$format
echo "Writing graph '$file'" >&2
(
  echo "digraph \"\" {"
  echo "  margin = 0;"
  echo "  node [shape = box, fontname = Arial, fontsize=9, fontcolor = \"#005A9C\", margin = 0.05];"
  echo "  edge [arrowsize=0.8];"
  sort <"$optionsTmp" | uniq | sed -E "s%, URL = \"$urlPath($falseoptions)\.$format\"%%"
  rm "$optionsTmp"
  echo "}"
) | "$dot" -T$format >"$file"

# Write graphs for all options
all=`tr '|' '\n' <<<"$all"`
while read option; do
  internalTmp=/tmp/internal_$option.tmp
  if [ -e "$internalTmp" ]; then
    externalTmp=/tmp/external_$option.tmp
    file=`basename "${option%.*}.$format"`
    label=`sed -E -e "s%the(.*)Skill%\1%" -e "s%_% %g" -e "s%([a-z])([A-Z])%\1 \2%g" <<<"$option" | tr '[:upper:]' '[:lower:]'`
    tooltip=`sed -E -e "s%^the(.*)Skill$%skill '\1'%" -e "s%^([A-Z].*)$%option '\1'%" <<<"$option"`
    echo "Writing graph '$file'" >&2
    (
      echo "digraph \"\" {"
      echo "margin = 0;"
      echo "node [style = filled, fillcolor = white, fontname = Arial, fontsize=9, fontcolor = \"#005A9C\", margin = 0.05];"
      echo "ranksep = 0.4;"
      echo "nodesep = 0.3;"
      echo "edge [arrowsize=0.8];"
      echo "compound = true;"
      echo "subgraph cluster_ {"
      if [ "$option" != "$(sed <<<"$option" 's%the\(.*\)Skill%\1%')" ]; then
        echo "label = \"skill '$label'\""
      else
        echo "label = \"option '$label'\""
      fi
      echo "tooltip = \"$tooltip\""
      echo "labeljust = l;"
      echo "style = filled;"
      echo "fillcolor = \"#F4F4F4\";"
      echo "fontname = Arial;"
      echo "fontsize=12;"
      echo "fontcolor = \"#005A9C\";"
      sort <"$internalTmp" | uniq
      rm "$internalTmp"
      echo "}"
      if [ -e "$externalTmp" ]; then
        sort <"$externalTmp" | uniq | sed -E "s%, URL = \"$urlPath($falseoptions)\.$format\"%%"
        rm "$externalTmp"
      fi
      echo "}"
    ) | "$dot" -T$format >"$file"
  fi
done <<<"$all"
